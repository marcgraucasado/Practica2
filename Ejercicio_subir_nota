## Sugerencia de Prompt

Quiero hacer un programa para **Arduino ESP32** en el entorno de **PlatformIO**, que controle un **LED** y dos **pulsadores** utilizando **interrupciones de un temporizador**. 
El LED debe parpadear a una frecuencia inicial y, si pulsamos un pulsador, la frecuencia de parpadeo debe subir. Si pulsamos el otro pulsador, dicha frecuencia debe bajar.
Además, se debe garantizar que los pulsadores que se deben leer en el temporizador se filtran para evitar rebotes.

```cpp
#include <Arduino.h>

// Definición de pines
#define LED_PIN 2
#define BTN_UP 38
#define BTN_DOWN 36

// Variables de control
volatile int blink_interval = 500; // 500ms = 2Hz frecuencia inicial
volatile bool led_state = false;

// Variables para debounce
volatile uint32_t lastPressUp = 0;
volatile uint32_t lastPressDown = 0;
const int debounceTime = 50;  // 50ms de debounce

// Timer de hardware
hw_timer_t *timer = NULL;

// Interrupción del timer (cada 1ms)
void IRAM_ATTR onTimer() {
    static uint32_t lastToggle = 0;
    uint32_t now = millis();

    // Manejo del LED
    if (now - lastToggle >= blink_interval) {
        led_state = !led_state;
        digitalWrite(LED_PIN, led_state);
        lastToggle = now;
    }

    // Lectura de botones con debounce dentro de la interrupción
    if (digitalRead(BTN_UP) == LOW && (now - lastPressUp > debounceTime)) {
        lastPressUp = now;
        if (blink_interval > 100) blink_interval -= 50;  // Aumenta la frecuencia
    }

    if (digitalRead(BTN_DOWN) == LOW && (now - lastPressDown > debounceTime)) {
        lastPressDown = now;
        if (blink_interval < 1000) blink_interval += 50;  // Disminuye la frecuencia
    }
}

void setup() {
    Serial.begin(115200);

    // Configurar pines
    pinMode(LED_PIN, OUTPUT);
    pinMode(BTN_UP, INPUT_PULLUP);
    pinMode(BTN_DOWN, INPUT_PULLUP);

    // Configurar Timer (Timer 0, divisor 80 → 1 tick = 1 µs, modo auto-reload)
    timer = timerBegin(0, 80, true);
    timerAttachInterrupt(timer, &onTimer, true);
    timerAlarmWrite(timer, 1000, true);  // Ejecuta cada 1ms
    timerAlarmEnable(timer);
}

void loop() {
    // Se puede agregar código sin afectar el timer
}
